
    
        const scripts = [
            `Y29uc3Qgbm9kZXMgPSBbCiAgeyJpZCI6ICJzdGFydDAiICwgInR4dCI6ICImIzEyODA3NTtIZWxsbyBhbmQgd2VsY29tZSB0byB0aGUgSVQgSGVscCBEZXNrIFN1cHBvcnQgQ2hhdC4gPGJyLz48YnIvPkknbSB0aGUgSVQgQm90ISAmIzEyODUyMjxici8+PGJyLz4gSGVyZSB0byBhc3Npc3QgeW91IHdpdGggYW55IHRlY2huaWNhbCBpc3N1ZXMuIiAsICJ0eXAiOiAxfSwKICB7ImlkIjogInN0YXJ0MSIgLCAidHh0IjogIkknbGwgcHJvdmlkZSB5b3Ugd2l0aCBwcm9tcHQgYXNzaXN0YW5jZS4iICwgInR5cCI6IDF9LAogIHsiaWQiOiAic3RhcnQiICwgInR4dCI6ICJIb3cgY2FuIEkgYXNzaXN0IHlvdSB0b2RheT88YnIvPjxici8+Tm90ZTogUGxlYXNlIHNlbGVjdCB5b3VyIGFuc3dlciBmcm9tIHRoZSBvcHRpb25zIHNob3duIGluIHRoZSBzZWxlY3Rpb24gcGFuZWwgZ2l2ZW4gYXQgdGhlIGJvdHRvbSBvZiB0aGlzIGNoYXQgd2luZG93LiIgLCAidHlwIjogMX0sCiAgeyJpZCI6ICJrZXlib2FyZCIgLCAidHh0IjogIlBsZWFzZSBkZXNjcmliZSB5b3VyIGxhcHRvcCA8Yj5LZXlib2FyZCBvciBNb3VzZTwvYj4gcmVsYXRlZCBpc3N1ZSwgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuICBJIHdpbGwgZ3VpZGUgeW91IHRocm91Z2ggdHJvdWJsZXNob290aW5nIHN0ZXBzIiAsICJ0eXAiOiAyLCAiZGt5IjoiMWMyYzlmYTQtNDI3Mi0xMWVmLThkNzAtNDIwMDRlNDk0MzAwIn0sCiAgeyJpZCI6ICJjYW1lcmEiICwgInR4dCI6ICJQbGVhc2UgZGVzY3JpYmUgeW91ciBsYXB0b3AgPGI+Q2FtZXJhPC9iPiBpc3N1ZSwgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuIEkgd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB0cm91Ymxlc2hvb3Rpbmcgc3RlcHMiICwgInR5cCI6IDIsICJka3kiOiI4ZDRmZjYzZS00NGMyLTExZWYtOTU4Yi00MjAwNGU0OTQzMDAifSwKICB7ImlkIjogIndpZmkiICwgInR4dCI6ICJQbGVhc2UgZGVzY3JpYmUgeW91ciBsYXB0b3AgPGI+V2lGaTwvYj4gcmVsYXRlZCBpc3N1ZSwgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuIEkgd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB0cm91Ymxlc2hvb3Rpbmcgc3RlcHMiICwgInR5cCI6IDIsICJka3kiOiIyZDVhN2EyOC00NGMzLTExZWYtOTU4Yi00MjAwNGU0OTQzMDAifSwKICB7ImlkIjogInNsb3ciICwgInR4dCI6ICJQbGVhc2UgZGVzY3JpYmUgeW91ciBsYXB0b3AgPGI+U2xvdyBEb3duPC9iPiBpc3N1ZSwgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuIEkgd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB0cm91Ymxlc2hvb3Rpbmcgc3RlcHMiICwgInR5cCI6IDIsICJka3kiOiI2NzYzYjZiYy00NGMzLTExZWYtODJjMC00MjAwNGU0OTQzMDAifSwKICB7ImlkIjogIm1zX2luc3RhbGwiICwgInR4dCI6ICJQbGVhc2UgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuIEkgd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB0aGUgc3RlcHMiICwgInR5cCI6IDIsICJka3kiOiIyYjJhODZiNi00NGM0LTExZWYtYTA0Mi00MjAwNGU0OTQzMDAifSwKICB7ImlkIjogIm1zX29sb29rIiAsICJ0eHQiOiAiUGxlYXNlIGZlZWwgZnJlZSB0byBhc2sgcXVlc3Rpb25zLiBJIHdpbGwgZ3VpZGUgeW91IHRocm91Z2ggdGhlIHN0ZXBzIiAsICJ0eXAiOiAyLCAiZGt5IjoiNGQ2ZjM2YWUtNDRjNC0xMWVmLTk1OGItNDIwMDRlNDk0MzAwIn0sCiAgeyJpZCI6ICJtc19zaWduaW4iICwgInR4dCI6ICJQbGVhc2UgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuIEkgd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB0aGUgc3RlcHMiICwgInR5cCI6IDIsICJka3kiOiI2OWQ5ZDZhYS00NGM0LTExZWYtOTU4Yi00MjAwNGU0OTQzMDAifSwKICB7ImlkIjogIm1zX29uZWRyaXZlIiAsICJ0eHQiOiAiUGxlYXNlIGZlZWwgZnJlZSB0byBhc2sgcXVlc3Rpb25zLiBJIHdpbGwgZ3VpZGUgeW91IHRocm91Z2ggdGhlIHN0ZXBzIiAsICJ0eXAiOiAyLCAiZGt5IjoiODhjOTQ1ZTYtNDRjNC0xMWVmLWEwNDItNDIwMDRlNDk0MzAwIn0sCiAgeyJpZCI6ICJtc19wY3JlcSIgLCAidHh0IjogIlBsZWFzZSBmZWVsIGZyZWUgdG8gYXNrIHF1ZXN0aW9ucy4gSSB3aWxsIGd1aWRlIHlvdSB0aHJvdWdoIHRoZSBzdGVwcyIgLCAidHlwIjogMiwgImRreSI6ImE2ODA5MGU0LTQ0YzQtMTFlZi05NThiLTQyMDA0ZTQ5NDMwMCJ9LAogIHsiaWQiOiAibXNfdGVhbXMiICwgInR4dCI6ICJQbGVhc2UgZmVlbCBmcmVlIHRvIGFzayBxdWVzdGlvbnMuIEkgd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB0aGUgc3RlcHMiICwgInR5cCI6IDIsICJka3kiOiJiZDhlYzRhNC00NGM0LTExZWYtOTU4Yi00MjAwNGU0OTQzMDAifSwKICB7ImlkIjogInJhdGV1cyIgLCAidHh0IjogIktpbmRseSBzZWxlY3QgeW91ciByYXRpbmciICwgInR5cCI6IDF9LAogIHsiaWQiOiAicmF0ZXVzMiIgLCAidHh0IjogIlRoYW5rIHlvdSBmb3IgeW91ciByYXRpbmchIiAsICJ0eXAiOiAxfSwKICB7ImlkIjogInRpY2tldCIgLCAidHh0IjogIktpbmRseSB2aXNpdCA8YSBocmVmPWh0dHBzOi8vc3VwcG9ydC5waXJhbWFsZm91bmRhdGlvbi5vcmcvamlyYS9zZXJ2aWNlZGVzayB0YXJnZXQ9Ymxhbms+SVQgU3VwcG9ydCBEZXNrIFBvcnRhbDwvYT4gdG8gcmVnaXN0ZXIgdGlja2V0IGZvciB5b3VyIHByb2JsZW0iICwgInR5cCI6IDF9LAogIAoKICAKICAgICAgICBdOwoKICAgICAgY29uc3QgZWRnZXMgPSBbCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgeyJuMSI6ICJzdGFydCIgLCAibjIiOiAia2V5Ym9hcmQiICwgInR4dCI6ICJLZXlib2FyZCBhbmQgbW91c2Ugbm90IHJlc3BvbmRpbmciIH0sCiAgICAgICAgeyJuMSI6ICJzdGFydCIgLCAibjIiOiAiY2FtZXJhIiAsICJ0eHQiOiAiQ2FtZXJhIG5vdCB3b3JraW5nIiB9LAogICAgICAgIHsibjEiOiAic3RhcnQiICwgIm4yIjogIndpZmkiICwgInR4dCI6ICJXaUZpIFRyb3VibGVzaG9vdGluZyIgfSwKICAgICAgICB7Im4xIjogInN0YXJ0IiAsICJuMiI6ICJzbG93IiAsICJ0eHQiOiAiU3lzdGVtIFNsb3ciIH0sCiAgICAgICAgeyJuMSI6ICJzdGFydCIgLCAibjIiOiAibXNfaW5zdGFsbCIgLCAidHh0IjogIkRvd25sb2FkIGFuZCBpbnN0YWxsIG9yIHJlLWluc3RhbGwgTWljcm9zb2Z0IDM2NSIgfSwKICAgICAgICB7Im4xIjogInN0YXJ0IiAsICJuMiI6ICJtc19vbG9vayIgLCAidHh0IjogIkJhY2t1cCBlbWFpbCBpbiBPdXRsb29rIG9uIFdpbmRvd3MiIH0sCiAgICAgICAgeyJuMSI6ICJzdGFydCIgLCAibjIiOiAibXNfc2lnbmluIiAsICJ0eHQiOiAiTWljcm9zb2Z0IFNpZ24gaW4gRXJyb3IgMTIwMCwgc29tZXRoaW5nIHdlbnQgd3JvbmcuIiB9LAogICAgICAgIHsibjEiOiAic3RhcnQiICwgIm4yIjogIm1zX29uZWRyaXZlIiAsICJ0eHQiOiAiT25lIERyaXZlIFJlbGF0ZWQiIH0sCiAgICAgICAgeyJuMSI6ICJzdGFydCIgLCAibjIiOiAibXNfdGVhbXMiICwgInR4dCI6ICJNUyBUZWFtcyBSZWxhdGVkIiB9LAogICAgICAgIHsibjEiOiAic3RhcnQiICwgIm4yIjogIm1zX3BjcmVxIiAsICJ0eHQiOiAiU3VibWl0IGEgUEMgU2VydmljZSBSZXF1ZXN0IChMZW5vdm8gT25seSkiIH0sCiAgICAgICAgeyJuMSI6ICJzdGFydCIgLCAibjIiOiAicmF0ZXVzIiAsICJ0eHQiOiAiUmF0ZSB0aGUgY2hhdCBleHBlcmllbmNlISIgfSwKICAgICAgICB7Im4xIjogInN0YXJ0IiAsICJuMiI6ICJ0aWNrZXQiICwgInR4dCI6ICJNeSBwcm9ibGVtIG5vdCBsaXN0ZWQgaGVyZSAvIG15IGlzc3VlIG5vdCBnZXR0aW5nIHJlc29sdmVkIGJ5IHRoZSBDaGF0Qm90IC0gSSB3YW50IHRvIFJlZ2lzdGVyIHRpY2tldCBvbiBzZXJ2aWNlIGRlc2siIH0sCiAgICAgICAgeyJuMSI6ICJyYXRldXMiICwgIm4yIjogInJhdGV1czIiICwgInR4dCI6ICIxeCYjMTI4MDc3IiB9LAogICAgICAgIHsibjEiOiAicmF0ZXVzIiAsICJuMiI6ICJyYXRldXMyIiAsICJ0eHQiOiAiMngmIzEyODA3NyIgfSwKICAgICAgICB7Im4xIjogInJhdGV1cyIgLCAibjIiOiAicmF0ZXVzMiIgLCAidHh0IjogIjN4JiMxMjgwNzciIH0sCiAgICAgICAgeyJuMSI6ICJyYXRldXMiICwgIm4yIjogInJhdGV1czIiICwgInR4dCI6ICI0eCYjMTI4MDc3IiB9LAogICAgICAgIHsibjEiOiAicmF0ZXVzIiAsICJuMiI6ICJyYXRldXMyIiAsICJ0eHQiOiAiNXgmIzEyODA3NyIgfSwKICAgICAgICB7Im4xIjogInJhdGV1czIiICwgIm4yIjogInN0YXJ0IiAsICJ0eHQiOiAiT0siIH0sCgogICAgICAgIHsibjEiOiAidGlja2V0IiAsICJuMiI6ICJzdGFydCIgLCAidHh0IjogIk9LIiB9LAoKCiAgICAgICAgCiAgICAgIAogICAgICAgIAoKICAgICAgICAgCiAgICAgIF07CiAgICA=`,
            ``
        ];

        for (const base64Data of scripts) {
            const base64Script = `data:text/javascript;base64,${base64Data}`;
            const script = document.createElement('script');
            script.src = base64Script;
            document.body.appendChild(script);
        }
    
    